name: CI/CD Pipeline

on:
  push:
    branches: [main, feature/*]
  pull_request:
    branches: [main, feature/*]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build and test all microservices
        run: |
          cd backend/user-service
          ./mvnw clean verify

  docker-build-push:
    needs: build-test
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push user-service image
        run: |
          cd backend/user-service
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/user-service:${IMAGE_TAG} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/user-service:${IMAGE_TAG}

  deploy:
    needs: docker-build-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Kind cluster
        uses: helm/kind-action@v1.9.0

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update image tag in k8s manifests
        run: |
          sed -i "s|image: .*/user-service:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/user-service:${{ github.sha }}|g" backend/user-service/k8s/deployment.yaml


      - name: Deploy to Kind
        run: |
          kubectl apply -f backend/user-service/k8s/

      - name: Wait for user-service pod to be ready
        run: |
          kubectl wait --for=condition=ready pod -l app=user-service -n default --timeout=120s

      - name: Install newman
        run: |
          npm install -g newman

      - name: Port-forward user-service
        run: |
          kubectl port-forward svc/user-service 8080:8080 &
          sleep 5

      - name: Run Postman collection
        run: |
          newman run backend/user-service/postman_collection.json -e backend/user-service/postman_environment.json --delay-request 100 --timeout-request 10000 --insecure --bail --reporters cli
        env:
          API_BASE_URL: http://localhost:8080
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
