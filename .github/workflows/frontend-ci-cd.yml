name: Frontend CI/CD

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop, feature/*]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  docker-build-push:
    needs: build-test
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push frontend image
        run: |
          cd frontend
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/docutrace-frontend:${IMAGE_TAG} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/docutrace-frontend:${IMAGE_TAG}

  deploy:
    needs: docker-build-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Kind cluster
        uses: helm/kind-action@v1.9.0

      - name: Deploy to Kind
        run: |
          kubectl apply -f frontend/k8s/

      - name: Set image on deployment
        run: |
          kubectl set image deployment/frontend frontend=${{ secrets.DOCKERHUB_USERNAME }}/docutrace-frontend:${{ github.sha }} --namespace default
          kubectl rollout status deployment/frontend --timeout=120s

      - name: Wait for frontend deployment rollout
        run: |
          set -e
          kubectl rollout status deployment/frontend --timeout=180s || {
            echo 'Deployment did not complete. Printing diagnostics:'
            kubectl get deploy/frontend
            kubectl describe deploy/frontend
            kubectl get pods -l app=frontend -o wide
            # Show logs of the newest pod if available
            POD=$(kubectl get pods -l app=frontend -o jsonpath='{.items[0].metadata.name}')
            echo "--- Logs for $POD ---"
            kubectl logs "$POD" || true
            exit 1
          }

      - name: Port-forward frontend
        run: |
          kubectl port-forward svc/frontend 8080:80 &
          sleep 10

      - name: Check frontend HTTP response
        run: |
          curl -f http://127.0.0.1:8080 || (echo 'Frontend not responding' && exit 1)

      - name: Show frontend pod logs on failure
        if: failure()
        run: |
          echo '--- frontend pod logs (failure) ---'
          kubectl logs $(kubectl get pods -l app=frontend -n default -o jsonpath='{.items[0].metadata.name}') -n default || echo 'Could not get logs.'
